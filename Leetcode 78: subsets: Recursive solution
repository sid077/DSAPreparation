Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:

Input: nums = [0]
Output: [[],[0]]

 

Constraints:

    1 <= nums.length <= 10
    -10 <= nums[i] <= 10
    All the numbers of nums are unique.



//Solution
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        int n=nums.length;
       
        ans=findSubset(nums,nums.length-1);
           
        return ans;
    }
    public List<List<Integer>> findSubset(int[] nums,int ind){
        if(ind==0){
            List<List<Integer>> a = new ArrayList<>();
        
           ArrayList<Integer> s2= new ArrayList<>();
            a.add(new ArrayList<Integer>());
             s2.add(nums[0]);
            a.add(s2);
             System.out.println(a);
            return a;
        }
        else{
            List<List<Integer>> s1 = findSubset(nums,ind-1);
            int n=s1.size();
            List<Integer> cur = new ArrayList<>();
            cur.add(nums[ind]);
            s1.add(cur);
            for(int i=0;i<n;i++){
                List<Integer> s2 = new ArrayList<>(s1.get(i));
                if(s2.size()>0){
                    s2.add(nums[ind]);
                    s1.add(s2);
                }
                
            }
           
         
            return s1;
            
        }
       
    }
}
