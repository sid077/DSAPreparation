You are given a 0-indexed array nums consisting of n positive integers.

The array nums is called alternating if:

    nums[i - 2] == nums[i], where 2 <= i <= n - 1.
    nums[i - 1] != nums[i], where 1 <= i <= n - 1.

In one operation, you can choose an index i and change nums[i] into any positive integer.

Return the minimum number of operations required to make the array alternating.

 

Example 1:

Input: nums = [3,1,3,2,4,3]
Output: 3
Explanation:
One way to make the array alternating is by converting it to [3,1,3,1,3,1].
The number of operations required in this case is 3.
It can be proven that it is not possible to make the array alternating in less than 3 operations. 

Example 2:

Input: nums = [1,2,2,2,2]
Output: 2
Explanation:
One way to make the array alternating is by converting it to [1,2,1,2,1].
The number of operations required in this case is 2.
Note that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.

//Solution
class Solution {
    public int minimumOperations(int[] nums) {
        Map<Integer,Integer> odd= new HashMap<>();
        Map<Integer,Integer> even = new HashMap<>();
       int oddl=0,evenl=0;
        for(int i=0;i<nums.length;i++){
            if(i%2==0) {
                evenl++;
                even.put(nums[i],even.getOrDefault(nums[i],0)+1);}
            else {
                odd.put(nums[i],odd.getOrDefault(nums[i],0)+1);
                oddl++;
                }
        }
         PriorityQueue<Integer> opq = new PriorityQueue<>((i1,i2)->odd.get(i1)>odd.get(i2)?-                1:odd.get(i1)==odd.get(i2)?0:1);
        
        PriorityQueue<Integer> epq = new PriorityQueue<>((i1,i2)->even.get(i1)>even.get(i2)?-1:even.get(i1)==even.get(i2)?0:1);
        for(Map.Entry<Integer,Integer>e: odd.entrySet()){
            opq.add(e.getKey());
        }
        for(Map.Entry<Integer,Integer>e: even.entrySet()){
            epq.add(e.getKey());
        }

      
        while(!opq.isEmpty()&&!epq.isEmpty()){
            int a=opq.poll();
            int b = epq.poll();
            if(a!=b){
                return nums.length-odd.get(a)-even.get(b);
            }else{
                if(opq.peek()!=null&&epq.peek()!=null&&odd.get(opq.peek())>even.get(epq.peek())) epq.add(b);
                else if (opq.peek()!=null&&epq.peek()!=null&&odd.get(opq.peek())<even.get(epq.peek())) opq.add(a);  
                else if(opq.peek()==null&&epq.peek()!=null) opq.add(a);
                else if(opq.peek()!=null&&epq.peek()==null) epq.add(b);
            }
        }
        return Math.min(evenl,oddl);
    }
}
