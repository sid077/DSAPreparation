A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

//Solution 
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
       HashMap<String,Boolean> map = new HashMap<>();
        for(int i=0;i<wordList.size();i++){
            map.put(wordList.get(i),false);
        }
        map.put(beginWord,false);
        if(!map.containsKey(endWord)) return 0;
        Queue<String> q = new ArrayDeque<>();
        int depth =0;
        q.add(beginWord);
        while(!q.isEmpty()){
          int lSize = q.size();
            depth++;
            while(lSize>0){
                 lSize=lSize-1; 
            String node = q.poll(); 
            if(!map.get(node)){
                map.put(node,true);
                for(int l=0;l<node.length();l++){
                   
                    char[] ch = node.toCharArray();
                    for(char j='a';j<='z';j++){
                        ch[l]=j;
                        if(endWord.equals(String.valueOf(ch)))
                            return depth+1;
                        if(map.containsKey(String.valueOf(ch))
                               &&!String.valueOf(ch).equals(node)
                                &&!map.get(String.valueOf(ch))){
                            q.add(String.valueOf(ch));
                        }
                    }
                }
              
            
            }  
            
        }
           
     }
        return 0;
    }
}
