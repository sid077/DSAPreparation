Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

//Solution
class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Integer> st = new Stack<>();
        int n = num.length();
        int i=0;
        while(i<n){
            while(k>0&&!st.isEmpty()&&st.peek()>Integer.parseInt(String.valueOf(num.charAt(i)))){
                st.pop();
                k--;
            }
            st.push(Integer.parseInt(String.valueOf(num.charAt(i))));
            i++;
        }
        //System.out.println(st);
        while(k>0){
            st.pop();
            k--;
        }
        StringBuilder sb= new StringBuilder();
        while(!st.empty()){
            sb.append(st.peek());
            st.pop();
        }
      
        sb.reverse();
        while(sb.length()>0&&sb.charAt(0)=='0')sb.deleteCharAt(0);
          if(sb.isEmpty())return "0";
        return sb.toString();
        
    }
}
