Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

 

Constraints:

    1 <= s1.length, s2.length <= 104
    s1 and s2 consist of lowercase English letters.

//solution
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length()) {
            return false;
        }
        int []ch = new int[26];
        int []ch2 = new int[26];
        for(int i=0;i<s1.length();i++){
            ch[s1.charAt(i)-'a']++;
             ch2[s2.charAt(i)-'a']++;
        }
      
        if(isEqual(ch,ch2)) return true;
        for(int i=0,j=s1.length();j<s2.length();i++,j++){
            ch2[s2.charAt(i)-'a']--;
            ch2[s2.charAt(j)-'a']++;
            if(isEqual(ch,ch2))return true;
        }
        return false;
        
    }
    public boolean isEqual(int[] c1,int[] c2){
        for(int i=0;i<26;i++){
            if(c1[i]!=c2[i]) return false;
        }
        return true;
    }
}
